You are tasked with implementing a protocol stack, namely a transport protocol based on UDP, 
a session-level security protocol inspired by SSL/TLS, and an application-level protocol. 
You must present this project as a client and a server, both using a library that contains 
the protocol logic. The library must be made up of 3 modules, for each level of the protocol stack, 
with a well-defined API and that adheres to the layered architecture. For transport and 
session level protocols the BSD Sockets API is a recommended source of inspiration, 
while for the application-level protocol something that resembles an HTTP client API is a 
recommended source of inspiration.

Now, for the technicalities:
 Implement a protocol atop UDP, with error checking and retransmissions. Limit the number of retries for 
 retransmission.
 Make the connection secure, using either a CA to get the public key of the receiver and encrypt data 
 with it, or using Diffie-Helman to get a shared connection key between client and server, ensure 
 that the traffic is encrypted.
Regarding the application-level protocol, you have 3 options:
  - make an FTP-like protocol for data transfer, thus you will need to ensure data splitting and in-order 
  delivery and reassembly at the destination. The protocol must support URIs, file creation and update (PUT), 
  file fetching (GET) and metadata retrieval (OPTIONS)
  - make a protocol based on the workings (state machine) of an ATM
  - make a protocol based on the workings (state machine) of a stationary telephone
All the stuff outlined above is for at most mark 8. To get to 10, you must also implement some bonus tasks 
(the more the merrier).
A suggestive list of bonus tasks:
Error correction codes at the transport level, instead of error checking and retransmission
In order delivery (available as a bonus task if application-level protocol isn't FTP-like)
Congestion/Flow control, to ensure Quality of Service
Actual QoS, using packet priorities (research on your own)
The client and server are using epoll (or IOCP on Windows)
Streaming compression at the transport level
Think for yourself of something else

The "Design and Validation of Computer Protocols" book: https://drive.google.com/drive/folders/1Pv_-2jddgSOYhTGXJtX7QLIJ4nkAhAIn you must read the first part (first 4 chapters/90 pages) until the exam. For your own sake, I recommend reading it ASAP, because it can assist you greatly when implementing the lab, especially error checking and congestion control parts.
